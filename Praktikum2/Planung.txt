		Verteilte GGT-Berechnung

	Übersicht

Das System soll den GGT von n Zahlen auf n verschiedenen GGT-Prozessen bestimmen und 
dabei von einem Starter gestartet und einem Koordinator koordiniert werden. Dabei soll
es für mehrere GGT-Berechnungen zur Verfügung stehen ohne, dass die beteiligten
Komponenten neu gestartet werden müssen.
Das System soll aus fünf wesentlichen Komponenten bestehen:

Den GGT-Prozessen die die Berechnung des GGT bewerkstelligen.
Den Starter-Prozessen die jeweils einen Teil der GGT-Prozesse starten.
Ein Koordinator der sowohl das hoch- und runterfahren des Systems, als auch die Berechnung
des GGTs überwacht.
Ein Namensdienst der PIDs Namen zuordnet.
Ein ZooKeeper der die Nachrichten verwaltet.


	Systemphasen

Initialisierungsphase:
Zunächst werden Namensdienst und  Koordinator gestartMet.
Daraufhin werden die Starter gestartet und erfragen beim Koordinator die steuernden 
Werte für die GGT-Prozesse ab. Die Starter starten dann mit den übermittelten Werten
die GGT-Prozesse um sich dann von alleine zu beenden.
Die GGT-Prozesse registrieren sich nun beim Namensdienst mit der Nachricht "rebind" und
beim Koordinator mit der Nachricht "hello".
Der Koordinator mischt die Prozesse nun, ordnet sie in einem zufälligen Ring an und informiert sie
mit der Nachricht "setneighbors" über ihren linken und rechten Nachbarn.

Arbeitsphase:
Der Koordinator informiert jeden GGT-Prozess über seinen Startwert "mi" mit der Nachricht
"setpm".
Wenn alle GGT-Prozesse ihren Startwert bekommen haben schickt der Koordinator an 15% der
GGT-Prozesse (mindestens 2) eine Nachricht "sendy" um die GGT-Berechnung zu starten.
Immer wenn sich nun der "mi" eines GGT-Prozesses ändert, informiert er den Koordinator
mit der Nachricht "briefmi" darüber und schickt eine Nachricht "sendy" mit dem neuen Wert
an seinen linken und rechten Nachbarn.
Wenn nun einer der GGT-Prozesse für "max_wait_time" Millisekunden keine Nachricht bekommt, 
startet er eine Terminierungsabstimmung. Dazu schickt er eine Nachricht "abstimmung" mit 
seinem eigenen registrierten Namen an seinen rechten Nachbarn. Wenn sein Nachbar 
"max_wait-time" / 2 Millisekunden gewartet hat schickt er diese Nachricht weiter. Kommt
diese Nachricht beim ursprünglichen Versender wieder an, gilt die Berechnung als
beendet und er schickt das Endergebnis der Berechnung mit der Nachricht "briefterm" an
den Koordinator.

Beendigungsphase:
Der Koordinator schickt an jeden GGT-Prozess eine Nachricht "kill". Die GGT-Prozesse
melden sich dann unverzüglich vom Namensdienst mit einer Nachricht "unbind" ab und 
terminieren dann.


		Nachrichten

Zustand "initial":

		Starter:
		
	Koordinator ! {getsteeringval, PID}
		PID -> ProzessID des Starters.
	Starter ! {steeringval, Arbeitszeit, TermZeit, GGTProzessAnzahl}
		Arbeitszeit -> Simulierte Rechenzeit des GGT-Prozesses in Millisekunden.
		TermZeit 	-> Wartezeit eines GGT-Prozesses auf eine neue Nachricht bis eine Abstimmung gestartet wird.
		GGTProzessAnzahl -> Anzahl der zu erzeugenden GGT-Prozesse
	+ Log: Starter <PID> Angemeldet 

	
		ggT-Prozess:
		
	Koordinator ! {hello, Clientname}
		Clientname 	-> Atom welches den Clientennamen repräsentiert. Dieser Name kann vom Namensdienst in eine eindeutige ProzessID übersetzt werden.
	+ Log: PID- ggT-Prozess angemeldet <Timestamp>
	
	
		ZooKeeper:
		
	Koordinator ! step
		Der Koordinator wechselt in die Arbeitsphase baut den GGT-Prozess-Ring auf. Danach wartet er auf das Signal zum Start der GGT-Berechnung
	ZooKeeper ! ok
		Erfolgsmeldung für den Wechsel in die Arbeitsphase
	
Zustand "bereit":

		Starter:
		
	Koordinator ! {getsteeringval, PID}
		PID -> ProzessID des Starters
	Starter ! rejected
		Da der Koordinator nicht mehr im Zustand "initial" ist wird der Starter abgewiesen
	+ Log : Starter: <PID> rejected
	
	
		GGT-Prozess:
		
	Koordinator ! {hello, Clientname}
		Clientname 	-> Atom welches den Clientennamen repräsentiert.
	GGT-Prozess ! kill
		Da der Koordinator nicht mehr im Zustand "initial" ist wird der GGT-Prozess abgewiesen
	+ Log : ggT-Prozess: <PID> rejected
	
	GGT-Prozess ! {sendy, Y}
		Y -> Neu aufgerufenes Y
		Rekursiver Aufruf der GGT-Berechnung.
	Koordinator ! {briefmi, {Clientname, NewMi, CZeit}}
		ClientName -> Atomarer Name des reportierenden Prozesses
		NewMi -> Neue ermitteltes Mi
		CZeit -> Uhrzeit als String zu der dieser neue Wert ermittelt wurde
		
	GGT-Prozess ! {abstimmung, Initiator}
		Initiator -> atomarer Name des Initiators der Abstimmung. 
		Abstimmung über die Terminierung der Berechnung. Wenn der empfangende GGT-Prozess der Initiator ist wird eine Nachricht "briefterm" an den Koordinator verschickt.
	Koordinator ! {briefterm, {Clientname, NewMi, CZeit}}
		ClientName -> Atomarer Name des reportierenden Prozesses
		NewMi -> Neue ermitteltes Mi
		CZeit -> Uhrzeit als String zu der dieser neue Wert ermittelt wurde
		Terminierungsnachricht des GGT-Prozesses an den Koordinator mit dem entsprechenden Wert
		
	GGT-Prozess ! {tellmi, From}
		From -> Atomarer Name des anfragenden Prozesses
	From ! {mi, Mi}
		Mi -> Aktuelles Mi
		
	
		Koordinator:
		
	GGT-Prozess ! {setpm, NewMi}
		NewMi -> Neues Mi für den jeweiligen GGT-Prozess
		Setzt das Mi im empfangenen GGT-Prozess neu.

	GGT-Prozess ! {setneighbors, LeftNeighbor, RightNeighbor}
		LeftNeighbor -> Atom-name des neuen linken Nachbarn des GGT-Prozesses. 
		RightNeighbor -> Atom-name des neuen rechten Nachbarn des GGT-Prozesses. 
		
	GGT-Prozess ! {sendy, Y}
		Y -> Neu aufgerufenes Y
		"Anstupsen" eines GGT-Prozesses zum weiterführen oder starten der Berechnung.
		
	GGT-Prozess ! kill
		Der GGT-Prozess meldet sich vom Namensdienst ab und beendet dann sofort alle Kind-Prozesse und sich selber.
		
	GGT-Prozess ! {tellmi, From}
		From -> Atomarer Name des Koordinators
	From ! {mi, Mi}
		Mi -> Aktuelles Mi
	
	GGT-Prozess ! {pingGGT, From}
		From -> atomarer Name des Anfragenden Prozesses
	From ! {pongGGT, GGTname}
		GGTName -> atomarer Name des Antwortenden Prozesses
	
	
		ZooKeeper:
		
	Koordinator ! {calc, WunschGGT}
		WunschGGT -> Wunsch-GGT der berechnet werden soll.
		Nach dem Erhalten dieser Nachricht wird eine neue GGT-Berechnung gestartet.
	ZooKeeper ! ok
		Wenn eine Berechnung gestartet werden kann.
	ZooKeeper ! error
		Wenn bereits eine Berechnung ausgeführt wird.
	
	Koordinator ! reset
		Der Server sendet jedem GGT-Prozess die Nachricht "kill" und bringt sich selber zurück in den Zustand "initial"
	ZooKeeper ! ok
		Erfolgsmeldung für den Wechsel in die Arbeitsphase
		
	Koordinator ! step
		Ungültige step-Nachricht
	ZooKeeper ! error
		Fehlernachricht, da step in der "bereit"-Phase ein ungültiger Befehl ist
		
	Koordinator ! prompt
		Aufforderung des ZooKeepers die aktuellen Mis aller GGT-Prozesse abzufragen und im Log einzutragen.
	ZooKeeper ! ok
		Bestätigung der Anfrage
		
	Koordinator ! nudge
		Aufforderung des ZooKeepers die den Lebenszustand aller GGT-Prozesse abzufragen und im Log einzutragen.
	ZooKeeper ! ok
		Bestätigung der Anfrage
		
	Koordinator ! toggle
		Aufforderung des ZooKeepers das Flag zur Korrektur bei falschen Terminierungsmeldungen umzusetzen.
	ZooKeeper ! {ok, NewFlag}
		NewFlag -> Neuer Wert des Flags
		
	Koordinator ! kill
		Aufforderung des ZooKeepers an den Koordinator in den Zustand "beenden" zu wechseln.
	ZooKeeper ! ok
		Erfolgsmeldung für den WEchsel in die Beendigungsphase
	
	
Zustand "beenden"
	
		Koordinator:
	
	GGT-Prozess ! kill
		Der GGT-Prozess meldet sich vom Namensdienst ab und beendet dann sofort alle Kind-Prozesse und sich selber.
	